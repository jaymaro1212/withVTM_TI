import csv
import requests
import pymysql
import re
from datetime import datetime

RAW_CSV_URL = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"

def get_connection():
  return pymysql.connect(
    host="172.16.250.227",
    user="root",
    password="qhdks00@@",
    database="vtm",
    charset="utf8mb4",
    cursorclass=pymysql.cursors.DictCursor
  )

def extract_cve_code(codes_str):
  match = re.search(r"CVE-\d{4}-\d{4,7}", codes_str or "")
  return match.group(0) if match else ""

def update_exploitdb():
  res = requests.get(RAW_CSV_URL)
  res.encoding = 'utf-8'
  lines = res.text.splitlines()
  reader = csv.DictReader(lines)

  conn = get_connection()
  cursor = conn.cursor()
  now = datetime.now().strftime("%Y-%m-%d")

  insert_rows = []
  update_rows = []

  # 기존 데이터 가져오기 (ex_id 기준)
  cursor.execute("SELECT ex_id, cve_code FROM exploitdb")
  existing_data = {row['ex_id']: row for row in cursor.fetchall()}

  for row in reader:
    ex_id = int(row["id"])
    file = row["file"]
    description = row["description"]
    date_published = row["date_published"] or None
    author = row["author"]
    type_ = row["type"]
    platform = row["platform"]
    port = row["port"]
    verified = row["verified"]
    codes = row["codes"]
    tags = row["tags"]
    aliases = row["aliases"]
    screenshot = row["screenshot_url"]
    application = row["application_url"]
    source = row["source_url"]

    cve = extract_cve_code(codes)

    # 신규
    if ex_id not in existing_data:
      insert_rows.append((
        ex_id, file, description, date_published,
        author, type_, platform, port, verified,
        cve, tags, aliases,
        screenshot, application, source,
        now, now
      ))
    else:
      # 업데이트 대상인지 판단 (가볍게 cve_code만 비교)
      if existing_data[ex_id]["cve_code"] != cve:
        update_rows.append((
          file, description, date_published,
          author, type_, platform, port, verified,
          cve, tags, aliases,
          screenshot, application, source,
          now, ex_id
        ))

  # INSERT 처리
  if insert_rows:
    cursor.executemany("""
      INSERT INTO exploitdb (
        ex_id, file, description, date_published,
        author, type, platform, port, verified,
        cve_code, tags, aliases,
        screenshot_url, application_url, source_url,
        date_added, date_updated
      ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, insert_rows)

  # UPDATE 처리
  if update_rows:
    cursor.executemany("""
      UPDATE exploitdb SET
        file = %s,
        description = %s,
        date_published = %s,
        author = %s,
        type = %s,
        platform = %s,
        port = %s,
        verified = %s,
        cve_code = %s,
        tags = %s,
        aliases = %s,
        screenshot_url = %s,
        application_url = %s,
        source_url = %s,
        date_updated = %s
      WHERE ex_id = %s
    """, update_rows)

  conn.commit()
  conn.close()

  print("✅ ExploitDB 업데이트 완료")
  print(f"├─ 신규 항목 추가: {len(insert_rows)}건")
  print(f"├─ 기존 항목 업데이트: {len(update_rows)}건")
  print(f"└─ 작업 종료 시각: {now}")

if __name__ == "__main__":
  update_exploitdb()

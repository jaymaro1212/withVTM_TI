import csv
import requests
import pymysql
import re

RAW_CSV_URL = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"

def get_connection():
  return pymysql.connect(
    host="172.16.250.227",
    user="root",
    password="qhdks00@@",
    database="vtm",
    charset="utf8mb4",
    cursorclass=pymysql.cursors.DictCursor
  )

def extract_cve_code(codes_str):
  match = re.search(r"CVE-\d{4}-\d{4,7}", codes_str or "")
  return match.group(0) if match else ""

def merge_tags(old, new):
  if not old:
    return new or ""
  if not new:
    return old
  old_set = set(x.strip() for x in old.split(",") if x.strip())
  new_set = set(x.strip() for x in new.split(",") if x.strip())
  return ", ".join(sorted(old_set.union(new_set)))

def update_exploitdb():
  res = requests.get(RAW_CSV_URL)
  res.encoding = 'utf-8'
  lines = res.text.splitlines()
  reader = csv.DictReader(lines)

  merged = {}
  for row in reader:
    id_ = int(row["id"])
    if id_ not in merged:
      merged[id_] = row
    else:
      # 병합된 기존과 비교
      if any(
        row[col] != merged[id_][col]
        for col in row if col != "tags"
      ):
        raise ValueError(f"❌ ID {id_}는 tags 외 다른 컬럼도 다릅니다.")
      # tags만 병합
      merged[id_]["tags"] = merge_tags(merged[id_]["tags"], row["tags"])

  conn = get_connection()
  cursor = conn.cursor()

  cursor.execute("SELECT * FROM exploitdb")
  existing = {row['id']: row for row in cursor.fetchall()}

  insert_rows = []
  update_rows = []

  for id_, row in merged.items():
    file = row["file"]
    description = row["description"]
    date_published = row["date_published"] or None
    author = row["author"]
    type_ = row["type"]
    platform = row["platform"]
    port = row["port"]
    verified = row["verified"]
    codes = row["codes"]
    tags = row["tags"]
    aliases = row["aliases"]
    screenshot = row["screenshot_url"]
    application = row["application_url"]
    source = row["source_url"]
    cve = extract_cve_code(codes)
    base_date = date_published

    if id_ not in existing:
      insert_rows.append((
        id_, file, description, date_published,
        author, type_, platform, port, verified,
        cve, tags, aliases,
        screenshot, application, source,
        base_date, base_date
      ))
    else:
      prev = existing[id_]
      merged_tags = merge_tags(prev["tags"], tags)
      need_update = (
        file != prev["file"] or
        description != prev["description"] or
        author != prev["author"] or
        type_ != prev["type"] or
        platform != prev["platform"] or
        port != prev["port"] or
        verified != prev["verified"] or
        cve != prev["cve_code"] or
        merged_tags != prev["tags"] or
        aliases != prev["aliases"] or
        screenshot != prev["screenshot_url"] or
        application != prev["application_url"] or
        source != prev["source_url"]
      )
      if need_update:
        update_rows.append((
          file, description, date_published,
          author, type_, platform, port, verified,
          cve, merged_tags, aliases,
          screenshot, application, source,
          base_date, id_
        ))

  if insert_rows:
    cursor.executemany("""
      INSERT INTO exploitdb (
        id, file, description, date_published,
        author, type, platform, port, verified,
        cve_code, tags, aliases,
        screenshot_url, application_url, source_url,
        date_added, date_updated
      ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, insert_rows)

  if update_rows:
    cursor.executemany("""
      UPDATE exploitdb SET
        file = %s,
        description = %s,
        date_published = %s,
        author = %s,
        type = %s,
        platform = %s,
        port = %s,
        verified = %s,
        cve_code = %s,
        tags = %s,
        aliases = %s,
        screenshot_url = %s,
        application_url = %s,
        source_url = %s,
        date_updated = %s
      WHERE id = %s
    """, update_rows)

  conn.commit()
  conn.close()

  print("✅ ExploitDB 업데이트 완료")
  print(f"├─ 신규 항목 추가: {len(insert_rows)}건")
  print(f"└─ 기존 항목 업데이트: {len(update_rows)}건")

if __name__ == "__main__":
  update_exploitdb()
